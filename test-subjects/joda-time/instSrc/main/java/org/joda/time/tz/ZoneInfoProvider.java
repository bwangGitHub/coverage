/*
 *  Copyright 2001-2009 Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.time.tz;

import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.SoftReference;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.ConcurrentHashMap;

import org.joda.time.DateTimeZone;

/**
 * ZoneInfoProvider loads compiled data files as generated by
 * {@link ZoneInfoCompiler}.
 * <p>
 * ZoneInfoProvider is thread-safe and publicly immutable.
 *
 * @author Brian S O'Neill
 * @since 1.0
 */
public class ZoneInfoProvider implements Provider {
  static {
    CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.ping();
  }


    /** The directory where the files are held. */
    private final File iFileDir;
    /** The resource path. */
    private final String iResourcePath;
    /** The class loader to use. */
    private final ClassLoader iLoader;
    /** Maps ids to strings or SoftReferences to DateTimeZones. */
    private final Map<String, Object> iZoneInfoMap;

    /**
     * ZoneInfoProvider searches the given directory for compiled data files.
     *
     * @throws IOException if directory or map file cannot be read
     */
    public ZoneInfoProvider(File fileDir) throws IOException {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[1]++;
int CodeCoverConditionCoverageHelper_C1;
        if ((((((CodeCoverConditionCoverageHelper_C1 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C1 |= (2)) == 0 || true) &&
 ((fileDir == null) && 
  ((CodeCoverConditionCoverageHelper_C1 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[1].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C1, 1) || true)) || (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[1].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C1, 1) && false)) {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[1]++;
            throw new IllegalArgumentException("No file directory provided");

        } else {
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[2]++;}
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[2]++;
int CodeCoverConditionCoverageHelper_C2;
        if ((((((CodeCoverConditionCoverageHelper_C2 = 0) == 0) || true) && (!
(((CodeCoverConditionCoverageHelper_C2 |= (2)) == 0 || true) &&
 ((fileDir.exists()) && 
  ((CodeCoverConditionCoverageHelper_C2 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[2].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C2, 1) || true)) || (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[2].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C2, 1) && false)) {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[3]++;
            throw new IOException("File directory doesn't exist: " + fileDir);

        } else {
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[4]++;}
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[3]++;
int CodeCoverConditionCoverageHelper_C3;
        if ((((((CodeCoverConditionCoverageHelper_C3 = 0) == 0) || true) && (!
(((CodeCoverConditionCoverageHelper_C3 |= (2)) == 0 || true) &&
 ((fileDir.isDirectory()) && 
  ((CodeCoverConditionCoverageHelper_C3 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[3].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C3, 1) || true)) || (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[3].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C3, 1) && false)) {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[5]++;
            throw new IOException("File doesn't refer to a directory: " + fileDir);

        } else {
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[6]++;}

        iFileDir = fileDir;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[4]++;
        iResourcePath = null;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[5]++;
        iLoader = null;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[6]++;

        iZoneInfoMap = loadZoneInfoMap(openResource("ZoneInfoMap"));
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[7]++;
    }

    /**
     * ZoneInfoProvider searches the given ClassLoader resource path for
     * compiled data files. Resources are loaded from the ClassLoader that
     * loaded this class.
     *
     * @throws IOException if directory or map file cannot be read
     */
    public ZoneInfoProvider(String resourcePath) throws IOException {
        this(resourcePath, null, false);
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[8]++;
    }

    /**
     * ZoneInfoProvider searches the given ClassLoader resource path for
     * compiled data files.
     *
     * @param loader ClassLoader to load compiled data files from. If null,
     * use system ClassLoader.
     * @throws IOException if directory or map file cannot be read
     */
    public ZoneInfoProvider(String resourcePath, ClassLoader loader)
        throws IOException
    {
        this(resourcePath, loader, true);
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[9]++;
    }

    /**
     * @param favorSystemLoader when true, use the system class loader if
     * loader null. When false, use the current class loader if loader is null.
     */
    private ZoneInfoProvider(String resourcePath,
                             ClassLoader loader, boolean favorSystemLoader) 
        throws IOException
    {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[10]++;
int CodeCoverConditionCoverageHelper_C4;
        if ((((((CodeCoverConditionCoverageHelper_C4 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C4 |= (2)) == 0 || true) &&
 ((resourcePath == null) && 
  ((CodeCoverConditionCoverageHelper_C4 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[4].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C4, 1) || true)) || (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[4].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C4, 1) && false)) {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[7]++;
            throw new IllegalArgumentException("No resource path provided");

        } else {
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[8]++;}
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[11]++;
int CodeCoverConditionCoverageHelper_C5;
        if ((((((CodeCoverConditionCoverageHelper_C5 = 0) == 0) || true) && (!
(((CodeCoverConditionCoverageHelper_C5 |= (2)) == 0 || true) &&
 ((resourcePath.endsWith("/")) && 
  ((CodeCoverConditionCoverageHelper_C5 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[5].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C5, 1) || true)) || (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[5].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C5, 1) && false)) {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[9]++;
            resourcePath += '/';
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[12]++;

        } else {
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[10]++;}

        iFileDir = null;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[13]++;
        iResourcePath = resourcePath;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[14]++;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[15]++;
int CodeCoverConditionCoverageHelper_C6;

        if ((((((CodeCoverConditionCoverageHelper_C6 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C6 |= (8)) == 0 || true) &&
 ((loader == null) && 
  ((CodeCoverConditionCoverageHelper_C6 |= (4)) == 0 || true)))
 && !
(((CodeCoverConditionCoverageHelper_C6 |= (2)) == 0 || true) &&
 ((favorSystemLoader) && 
  ((CodeCoverConditionCoverageHelper_C6 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[6].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C6, 2) || true)) || (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[6].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C6, 2) && false)) {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[11]++;
            loader = getClass().getClassLoader();
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[16]++;

        } else {
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[12]++;}

        iLoader = loader;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[17]++;

        iZoneInfoMap = loadZoneInfoMap(openResource("ZoneInfoMap"));
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[18]++;
    }

    //-----------------------------------------------------------------------
    /**
     * If an error is thrown while loading zone data, uncaughtException is
     * called to log the error and null is returned for this and all future
     * requests.
     * 
     * @param id  the id to load
     * @return the loaded zone
     */
    public DateTimeZone getZone(String id) {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[19]++;
int CodeCoverConditionCoverageHelper_C7;
        if ((((((CodeCoverConditionCoverageHelper_C7 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C7 |= (2)) == 0 || true) &&
 ((id == null) && 
  ((CodeCoverConditionCoverageHelper_C7 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[7].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C7, 1) || true)) || (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[7].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C7, 1) && false)) {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[13]++;
            return null;

        } else {
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[14]++;}
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[20]++;

        Object obj = iZoneInfoMap.get(id);
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[21]++;
int CodeCoverConditionCoverageHelper_C8;
        if ((((((CodeCoverConditionCoverageHelper_C8 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C8 |= (2)) == 0 || true) &&
 ((obj == null) && 
  ((CodeCoverConditionCoverageHelper_C8 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[8].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C8, 1) || true)) || (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[8].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C8, 1) && false)) {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[15]++;
            return null;

        } else {
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[16]++;}
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[22]++;
int CodeCoverConditionCoverageHelper_C9;

        if ((((((CodeCoverConditionCoverageHelper_C9 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C9 |= (2)) == 0 || true) &&
 ((id.equals(obj)) && 
  ((CodeCoverConditionCoverageHelper_C9 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[9].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C9, 1) || true)) || (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[9].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C9, 1) && false)) {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[17]++;
            // Load zone data for the first time.
            return loadZoneData(id);

        } else {
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[18]++;}
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[23]++;
int CodeCoverConditionCoverageHelper_C10;

        if ((((((CodeCoverConditionCoverageHelper_C10 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C10 |= (2)) == 0 || true) &&
 ((obj instanceof SoftReference<?>) && 
  ((CodeCoverConditionCoverageHelper_C10 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[10].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C10, 1) || true)) || (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[10].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C10, 1) && false)) {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[19]++;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[24]++;
            @SuppressWarnings("unchecked")
            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[25]++;
            DateTimeZone tz = ref.get();
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[26]++;
int CodeCoverConditionCoverageHelper_C11;
            if ((((((CodeCoverConditionCoverageHelper_C11 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C11 |= (2)) == 0 || true) &&
 ((tz != null) && 
  ((CodeCoverConditionCoverageHelper_C11 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[11].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C11, 1) || true)) || (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[11].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C11, 1) && false)) {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[21]++;
                return tz;

            } else {
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[22]++;}
            // Reference cleared; load data again.
            return loadZoneData(id);

        } else {
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[20]++;}

        // If this point is reached, mapping must link to another.
        return getZone((String)obj);
    }

    /**
     * Gets a list of all the available zone ids.
     * 
     * @return the zone ids
     */
    public Set<String> getAvailableIDs() {
        // Return a copy of the keys rather than an umodifiable collection.
        // This prevents ConcurrentModificationExceptions from being thrown by
        // some JVMs if zones are opened while this set is iterated over.
        return new TreeSet<String>(iZoneInfoMap.keySet());
    }

    /**
     * Called if an exception is thrown from getZone while loading zone data.
     * 
     * @param ex  the exception
     */
    protected void uncaughtException(Exception ex) {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[27]++;
        Thread t = Thread.currentThread();
        t.getThreadGroup().uncaughtException(t, ex);
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[28]++;
    }

    /**
     * Opens a resource from file or classpath.
     * 
     * @param name  the name to open
     * @return the input stream
     * @throws IOException if an error occurs
     */
    private InputStream openResource(String name) throws IOException {
        InputStream in;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[29]++;
int CodeCoverConditionCoverageHelper_C12;
        if ((((((CodeCoverConditionCoverageHelper_C12 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C12 |= (2)) == 0 || true) &&
 ((iFileDir != null) && 
  ((CodeCoverConditionCoverageHelper_C12 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[12].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C12, 1) || true)) || (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[12].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C12, 1) && false)) {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[23]++;
            in = new FileInputStream(new File(iFileDir, name));
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[30]++;

        } else {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[24]++;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[31]++;
            String path = iResourcePath.concat(name);
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[32]++;
int CodeCoverConditionCoverageHelper_C13;
            if ((((((CodeCoverConditionCoverageHelper_C13 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C13 |= (2)) == 0 || true) &&
 ((iLoader != null) && 
  ((CodeCoverConditionCoverageHelper_C13 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[13].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C13, 1) || true)) || (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[13].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C13, 1) && false)) {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[25]++;
                in = iLoader.getResourceAsStream(path);
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[33]++;

            } else {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[26]++;
                in = ClassLoader.getSystemResourceAsStream(path);
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[34]++;
            }
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[35]++;
int CodeCoverConditionCoverageHelper_C14;
            if ((((((CodeCoverConditionCoverageHelper_C14 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C14 |= (2)) == 0 || true) &&
 ((in == null) && 
  ((CodeCoverConditionCoverageHelper_C14 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[14].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C14, 1) || true)) || (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[14].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C14, 1) && false)) {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[27]++;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[36]++;
                StringBuffer buf = new StringBuffer(40)
                    .append("Resource not found: \"")
                    .append(path)
                    .append("\" ClassLoader: ")
                    .append(iLoader != null ? iLoader.toString() : "system");
                throw new IOException(buf.toString());

            } else {
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[28]++;}
        }
        return in;
    }

    /**
     * Loads the time zone data for one id.
     * 
     * @param id  the id to load
     * @return the zone
     */
    private DateTimeZone loadZoneData(String id) {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[37]++;
        InputStream in = null;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[38]++;
boolean CodeCoverTryBranchHelper_Try1 = false;
        try {
CodeCoverTryBranchHelper_Try1 = true;
            in = openResource(id);
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[39]++;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[40]++;
            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);
            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[41]++;
            return tz;
        } catch (IOException e) {
CodeCoverTryBranchHelper_Try1 = false;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[30]++;
            uncaughtException(e);
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[42]++;
            iZoneInfoMap.remove(id);
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[43]++;
            return null;
        } finally {
if ( CodeCoverTryBranchHelper_Try1 ) {
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[29]++;
}
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[44]++;
boolean CodeCoverTryBranchHelper_Try2 = false;
            try {
CodeCoverTryBranchHelper_Try2 = true;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[45]++;
int CodeCoverConditionCoverageHelper_C15;
                if ((((((CodeCoverConditionCoverageHelper_C15 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C15 |= (2)) == 0 || true) &&
 ((in != null) && 
  ((CodeCoverConditionCoverageHelper_C15 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[15].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C15, 1) || true)) || (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[15].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C15, 1) && false)) {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[32]++;
                    in.close();
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[46]++;

                } else {
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[33]++;}
            } catch (IOException e) {
CodeCoverTryBranchHelper_Try2 = false;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[34]++;
            } finally {
    if ( CodeCoverTryBranchHelper_Try2 ) {
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[31]++;
}
  }
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Loads the zone info map.
     * 
     * @param in  the input stream
     * @return the map
     */
    private static Map<String, Object> loadZoneInfoMap(InputStream in) throws IOException {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[47]++;
        Map<String, Object> map = new ConcurrentHashMap<String, Object>();
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[48]++;
        DataInputStream din = new DataInputStream(in);
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[49]++;
boolean CodeCoverTryBranchHelper_Try3 = false;
        try {
CodeCoverTryBranchHelper_Try3 = true;
            readZoneInfoMap(din, map);
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[50]++;
        } finally {
if ( CodeCoverTryBranchHelper_Try3 ) {
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[35]++;
}
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[51]++;
boolean CodeCoverTryBranchHelper_Try4 = false;
            try {
CodeCoverTryBranchHelper_Try4 = true;
                din.close();
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[52]++;
            } catch (IOException e) {
CodeCoverTryBranchHelper_Try4 = false;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[37]++;
            } finally {
    if ( CodeCoverTryBranchHelper_Try4 ) {
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[36]++;
}
  }
        }
        map.put("UTC", new SoftReference<DateTimeZone>(DateTimeZone.UTC));
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[53]++;
        return map;
    }

    /**
     * Reads the zone info map from file.
     * 
     * @param din  the input stream
     * @param zimap  gets filled with string id to string id mappings
     */
    private static void readZoneInfoMap(DataInputStream din, Map<String, Object> zimap) throws IOException {
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[54]++;
        // Read the string pool.
        int size = din.readUnsignedShort();
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[55]++;
        String[] pool = new String[size];
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[56]++;
byte CodeCoverTryBranchHelper_L1 = 0;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.loops[1]++;


int CodeCoverConditionCoverageHelper_C16;
        for (int i=0;(((((CodeCoverConditionCoverageHelper_C16 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C16 |= (2)) == 0 || true) &&
 ((i<size) && 
  ((CodeCoverConditionCoverageHelper_C16 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[16].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C16, 1) || true)) || (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[16].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C16, 1) && false); i++) {
if (CodeCoverTryBranchHelper_L1 == 0) {
  CodeCoverTryBranchHelper_L1++;
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.loops[1]--;
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.loops[2]++;
} else if (CodeCoverTryBranchHelper_L1 == 1) {
  CodeCoverTryBranchHelper_L1++;
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.loops[2]--;
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.loops[3]++;
}
            pool[i] = din.readUTF().intern();
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[57]++;
        }

        // Read the mappings.
        size = din.readUnsignedShort();
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[58]++;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[59]++;
byte CodeCoverTryBranchHelper_L2 = 0;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.loops[4]++;


int CodeCoverConditionCoverageHelper_C17;
        for (int i=0;(((((CodeCoverConditionCoverageHelper_C17 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C17 |= (2)) == 0 || true) &&
 ((i<size) && 
  ((CodeCoverConditionCoverageHelper_C17 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[17].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C17, 1) || true)) || (CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.conditionCounters[17].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C17, 1) && false); i++) {
if (CodeCoverTryBranchHelper_L2 == 0) {
  CodeCoverTryBranchHelper_L2++;
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.loops[4]--;
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.loops[5]++;
} else if (CodeCoverTryBranchHelper_L2 == 1) {
  CodeCoverTryBranchHelper_L2++;
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.loops[5]--;
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.loops[6]++;
}
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[60]++;
boolean CodeCoverTryBranchHelper_Try5 = false;
            try {
CodeCoverTryBranchHelper_Try5 = true;
                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.statements[61]++;
            } catch (ArrayIndexOutOfBoundsException e) {
CodeCoverTryBranchHelper_Try5 = false;
CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[39]++;
                throw new IOException("Corrupt zone info map");
            } finally {
    if ( CodeCoverTryBranchHelper_Try5 ) {
  CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl.branches[38]++;
}
  }
        }
    }

}

class CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl extends org.codecover.instrumentation.java.measurement.CounterContainer {

  static {
    org.codecover.instrumentation.java.measurement.ProtocolImpl.getInstance(org.codecover.instrumentation.java.measurement.CoverageResultLogFile.getInstance(null), "fc723371-5766-4804-90bc-1687dd8f2639").addObservedContainer(new CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl ());
  }
    public static long[] statements = new long[62];
    public static long[] branches = new long[40];

  public static final org.codecover.instrumentation.java.measurement.ConditionCounter[] conditionCounters = new org.codecover.instrumentation.java.measurement.ConditionCounter[18];
  static {
    final String SECTION_NAME = "org.joda.time.tz.ZoneInfoProvider.java";
    final byte[] CONDITION_COUNTER_TYPES = {0,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1};
    for (int i = 1; i <= 17; i++) {
      switch (CONDITION_COUNTER_TYPES[i]) {
        case 0 : break;
        case 1 : conditionCounters[i] = new org.codecover.instrumentation.java.measurement.SmallOneConditionCounter(SECTION_NAME, "C" + i); break;
        case 2 : conditionCounters[i] = new org.codecover.instrumentation.java.measurement.SmallTwoConditionCounter(SECTION_NAME, "C" + i); break;
        case 3 : conditionCounters[i] = new org.codecover.instrumentation.java.measurement.MediumConditionCounter(SECTION_NAME, "C" + i); break;
        case 4 : conditionCounters[i] = new org.codecover.instrumentation.java.measurement.LargeConditionCounter(SECTION_NAME, "C" + i); break;
      }
    }
  }
    public static long[] loops = new long[7];

  public CodeCoverCoverageCounter$234cfny5tunz7b4uge3r2sh2tbjvm5dnl () {
    super("org.joda.time.tz.ZoneInfoProvider.java");
  }

  public static void ping() {/* nothing to do*/}

  public void reset() {
      for (int i = 1; i <= 61; i++) {
        statements[i] = 0L;
      }
      for (int i = 1; i <= 39; i++) {
        branches[i] = 0L;
      }
    for (int i = 1; i <= 17; i++) {
      if (conditionCounters[i] != null) {
        conditionCounters[i].reset();
      }
    }
      for (int i = 1; i <= 6; i++) {
        loops[i] = 0L;
      }
  }

  public void serializeAndReset(org.codecover.instrumentation.measurement.CoverageCounterLog log) {
    log.startNamedSection("org.joda.time.tz.ZoneInfoProvider.java");
      for (int i = 1; i <= 61; i++) {
        if (statements[i] != 0L) {
          log.passCounter("S" + i, statements[i]);
          statements[i] = 0L;
        }
      }
      for (int i = 1; i <= 39; i++) {
        if (branches[i] != 0L) {
          log.passCounter("B"+ i, branches[i]);
          branches[i] = 0L;
        }
      }
    for (int i = 1; i <= 17; i++) {
      if (conditionCounters[i] != null) {
        conditionCounters[i].serializeAndReset(log);
      }
    }
      for (int i = 1; i <= 2; i++) {
        if (loops[i * 3 - 2] != 0L) {
          log.passCounter("L" + i + "-0", loops[i * 3 - 2]);
          loops[i * 3 - 2] = 0L;
        }
        if ( loops[i * 3 - 1] != 0L) {
          log.passCounter("L" + i + "-1", loops[i * 3 - 1]);
          loops[i * 3 - 1] = 0L;
        }
        if ( loops[i * 3] != 0L) {
          log.passCounter("L" + i + "-2", loops[i * 3]);
          loops[i * 3] = 0L;
        }
      }
  }
}

