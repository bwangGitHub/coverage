// java -cp "build/testcases/:lib/optional/junit-3.8.2.jar:build/classes" org.apache.tools.MasterSuiteGenerator

package org.apache.tools;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

import java.lang.reflect.*;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Random;
import java.util.Scanner;
import java.util.Enumeration;
import java.util.regex.*;

import java.io.*;

public class MasterSuiteGenerator
{
    private ArrayList<UnitTest> unitTests;
    private ArrayList<UnitTest> excludedTests;
    private final String testDir = "/home/laura/workspace/coverage-size-corr/test-subjects/ant/src/tests/junit/org/apache/tools/";
    
    @SuppressWarnings("unchecked")
    public static void main (String [] args) throws Exception
    {
        MasterSuiteGenerator suiteGenerator = new MasterSuiteGenerator();
	
	//remove one test
	//suiteGenerator.removeTest(Integer.parseInt(args[0]));

	//run with that test missing
	suiteGenerator.buildMasterSuite();
	suiteGenerator.writeMasterSuite();
    }

    public MasterSuiteGenerator ()
    {
	unitTests = new ArrayList<UnitTest>();
	excludedTests = fillExcludedTestList();
	System.out.println(excludedTests.size() + " tests are being excluded from the test suite");
    }

    public void removeTest (int index)
    {
	excludedTests.remove(index);
	System.out.println(excludedTests.size() + " tests are being excluded from the test suite");
    }

    /*
      org.apache.tools.ant.types.PermissionsTest.testExit

      org.apache.tools.ant.taskdefs.JarTest.testRecreateWithUpdateNewerFile

      org.apache.tools.ant.taskdefs.JavaTest.testRunFailWithFailOnError

      org.apache.tools.ant.taskdefs.RecorderTest.testSubBuild
      org.apache.tools.ant.taskdefs.RecorderTest.testRestart
      org.apache.tools.ant.taskdefs.RecorderTest.testAppend
      org.apache.tools.ant.taskdefs.RecorderTest.testDeleteRestart
      org.apache.tools.ant.taskdefs.RecorderTest.testNoAppend
    */
    public ArrayList<UnitTest> fillExcludedTestList ()
    {
	ArrayList<UnitTest> excludes = new ArrayList<UnitTest>();
	String base = "org.apache.tools.ant.";

	excludes.add(new UnitTest(base + "taskdefs.AbstractCvsTaskTest", "testAbstractCvsTask"));
	excludes.add(new UnitTest(base + "taskdefs.AbstractCvsTaskTest", "testPackageAttribute"));
	excludes.add(new UnitTest(base + "taskdefs.AbstractCvsTaskTest", "testTagAttribute"));
	excludes.add(new UnitTest(base + "AntClassLoaderDelegationTest", "testFindResources"));
	excludes.add(new UnitTest(base + "AntClassLoaderDelegationTest", "testFindIsolateResources"));
	excludes.add(new UnitTest(base + "taskdefs.optional.PvcsTest", "test1"));
	excludes.add(new UnitTest(base + "taskdefs.optional.PvcsTest", "test2"));
	excludes.add(new UnitTest(base + "taskdefs.optional.PvcsTest", "test3"));
	excludes.add(new UnitTest(base + "taskdefs.optional.PvcsTest", "test4"));
	excludes.add(new UnitTest(base + "taskdefs.optional.PvcsTest", "test5"));
	excludes.add(new UnitTest(base + "taskdefs.optional.PvcsTest", "test6"));
	excludes.add(new UnitTest(base + "taskdefs.optional.ssh.ScpTest", "testSingleFileUploadAndDownload"));
	excludes.add(new UnitTest(base + "taskdefs.optional.ssh.ScpTest", "testMultiUploadAndDownload")); //12
	//excludes.add(new UnitTest(base + "taskdefs.optional.ssh.ScpTest", "testRemoteToDir"));
	//excludes.add(new UnitTest(base + "taskdefs.optional.junit.JUnitReportTest", "testNoFileJUnitNoFrames"));
	excludes.add(new UnitTest(base + "taskdefs.optional.junit.JUnitReportTest", "testEmptyFile")); //15
	//excludes.add(new UnitTest(base + "taskdefs.optional.junit.JUnitReportTest", "testIncompleteFile"));
	//excludes.add(new UnitTest(base + "taskdefs.optional.junit.JUnitReportTest", "testWrongElement"));
	excludes.add(new UnitTest(base + "taskdefs.optional.junit.JUnitReportTest", "testStackTraceLineBreaks"));
	//excludes.add(new UnitTest(base + "taskdefs.optional.junit.JUnitReportTest", "testSpecialSignsInSrcPath"));
	excludes.add(new UnitTest(base + "taskdefs.optional.junit.JUnitReportTest", "testSpecialSignsInHtmlPath"));
	//excludes.add(new UnitTest(base + "taskdefs.optional.junit.JUnitReportTest", "testWithStyleFromDir"));
	//excludes.add(new UnitTest(base + "taskdefs.optional.junit.JUnitReportTest", "testNoFrames"));
	//excludes.add(new UnitTest(base + "taskdefs.optional.junit.JUnitReportTest", "testWithStyleFromDirAndXslImport"));
	//excludes.add(new UnitTest(base + "taskdefs.optional.junit.JUnitReportTest", "testWithStyleFromClasspath"));
	//excludes.add(new UnitTest(base + "taskdefs.optional.junit.JUnitReportTest", "testWithParams"));
	excludes.add(new UnitTest(base + "taskdefs.optional.junit.VmCrash", "testCrash")); //26
	excludes.add(new UnitTest(base + "taskdefs.optional.junit.XMLFormatterWithCDATAOnSystemOut", "testOutput"));
	excludes.add(new UnitTest(base + "taskdefs.optional.junit.XMLFormatterWithCDATAOnSystemOut", "testBuildfile"));
	excludes.add(new UnitTest(base + "taskdefs.optional.jdepend.JDependTest", "testSimple"));
	excludes.add(new UnitTest(base + "taskdefs.optional.jdepend.JDependTest", "testXml")); //30

	//excludes.add(new UnitTest(base + "taskdefs.optional.jdepend.JDependTest", "testFork"));
	//excludes.add(new UnitTest(base + "taskdefs.optional.jdepend.JDependTest", "testForkXml"));
	//excludes.add(new UnitTest(base + "taskdefs.optional.jdepend.JDependTest", "testTimeout"));
	//excludes.add(new UnitTest(base + "taskdefs.optional.jdepend.JDependTest", "testTimeoutNot"));

	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testCreatePropertiesCacheViaModifiedSelector"));

	excludes.add(new UnitTest(base + "taskdefs.RecorderTest", "testNoAppend"));
	excludes.add(new UnitTest(base + "taskdefs.RecorderTest", "testAppend"));	
	excludes.add(new UnitTest(base + "taskdefs.RecorderTest", "testRestart"));
	excludes.add(new UnitTest(base + "taskdefs.RecorderTest", "testDeleteRestart"));
	excludes.add(new UnitTest(base + "taskdefs.RecorderTest", "testSubBuild")); //39

	//excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testNoJarNoClassname"));
	//excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testJarNoFork"));
	//excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testJarAndClassName"));
	//excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testClassnameAndJar"));
	//excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testRun"));
	//excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testRunFail"));
	//excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testRunFailFoe"));
	//excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testRunFailFoeFork"));
	//excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testExcepting"));
	//excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testExceptingFork")); 
	//excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testExceptingFoe")); //50
	//excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testExceptingFoeFork"));
	//excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testResultPropertyZero"));
	//excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testResultPropertyNonZero"));
	//excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testResultPropertyZeroNoFork"));
	//excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testResultPropertyNonZeroNoFork"));
	excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testRunFailWithFailOnError")); //56
	  /*excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testRunSuccessWithFailOnError"));
	excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testSpawn"));
	excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testRedirect1"));
	excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testRedirect2"));
	excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testRedirect3"));
	excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testRedirector1"));
	excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testRedirector2"));
	excludes.add(new UnitTest(base + "taskdefs.JavaTest", "testReleasedInput"));*/ //64

	/*excludes.add(new UnitTest(base + "taskdefs.JarTest", "test1"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "test2"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "test3"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "test4"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testNoRecreateWithoutUpdate")); 
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testNoRecreateWithUpdate")); //70
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testNoRecreate"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testRecreateWithoutUpdateAdditionalFiles"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testRecreateWithUpdateAdditionalFiles"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testRecreateWithoutUpdateNewerFile"));*/
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testRecreateWithUpdateNewerFile"));
	/*excludes.add(new UnitTest(base + "taskdefs.JarTest", "testRecreate"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testManifestStaysIntact"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testNoRecreateBasedirExcludesWithUpdate"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testNoRecreateBasedirExcludesWithoutUpdate"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testNoRecreateZipfilesetExcludesWithUpdate")); //80
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testNoRecreateZipfilesetExcludesWithoutUpdate"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testRecreateZipfilesetWithoutUpdateAdditionalFiles"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testRecreateZipfilesetWithUpdateAdditionalFiles"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testRecreateZipfilesetWithoutUpdateNewerFile"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testRecreateZipfilesetWithUpdateNewerFile"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testCreateWithEmptyFileset"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testUpdateIfOnlyManifestHasChanged"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testNoDuplicateIndex"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testRootFilesInIndex"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testManifestOnlyJar")); //90
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testIndexJarsPlusJarMarker"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testNoVersionInfoFail"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testNoVersionInfoIgnore"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testNoVersionInfoWarn"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testNoVersionInfoNoStrict"));
	excludes.add(new UnitTest(base + "taskdefs.JarTest", "testHasVersionInfo"));*/

	excludes.add(new UnitTest(base + "util.ClasspathUtilsTest", "testOnlyOneInstance")); //97

	excludes.add(new UnitTest(base + "taskdefs.PathConvertTest", "testMap"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testPropertyfileCache"));
	
	//excludes.add(new UnitTest(base + "types.PermissionsTest", "testDefaultGranted"));
	//excludes.add(new UnitTest(base + "types.PermissionsTest", "testGranted"));
	//excludes.add(new UnitTest(base + "types.PermissionsTest", "testGrantedAndRevoked"));
	//excludes.add(new UnitTest(base + "types.PermissionsTest", "testDefaultRevoked"));
	//excludes.add(new UnitTest(base + "types.PermissionsTest", "testOther"));
	excludes.add(new UnitTest(base + "types.PermissionsTest", "testExit"));

	//excludes.add(new UnitTest(base + "IncludeTest", "test1"));
	//excludes.add(new UnitTest(base + "IncludeTest", "test2"));
	//excludes.add(new UnitTest(base + "IncludeTest", "test3"));
	//excludes.add(new UnitTest(base + "IncludeTest", "test4"));
	//excludes.add(new UnitTest(base + "IncludeTest", "test5"));
	excludes.add(new UnitTest(base + "IncludeTest", "testParseErrorInIncluding")); //109
	excludes.add(new UnitTest(base + "IncludeTest", "testTaskErrorInIncluding"));
	//excludes.add(new UnitTest(base + "IncludeTest", "testParseErrorInIncluded")); 
	excludes.add(new UnitTest(base + "IncludeTest", "testTaskErrorInIncluded")); //112
	//excludes.add(new UnitTest(base + "IncludeTest", "testWithSpaceInclude"));
	//excludes.add(new UnitTest(base + "IncludeTest", "testWithSpaceSimple"));
	//excludes.add(new UnitTest(base + "IncludeTest", "testWithSpaceRelative"));

	//excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testValidateWrongCache")); //117
	//excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testValidateWrongAlgorithm"));
	//excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testValidateWrongComparator"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testIllegalCustomAlgorithm")); //119
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testNonExistentCustomAlgorithm"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testCustomAlgorithm"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testCustomAlgorithm2"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testCustomClasses")); //123
	  /*excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testDelayUpdateTaskFinished"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testDelayUpdateTargetFinished"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testDelayUpdateBuildFinished"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testPropcacheInvalid"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testPropertyfileCache"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testCreatePropertiesCacheDirect")); //130
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testCreatePropertiesCacheViaModifiedSelector"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testCreatePropertiesCacheViaCustomSelector"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testHashvalueAlgorithm"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testDigestAlgorithmMD5"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testDigestAlgorithmSHA"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testChecksumAlgorithm"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testChecksumAlgorithmCRC"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testChecksumAlgorithmAdler"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testEqualComparator"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testRuleComparator")); //140
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testEqualComparatorViaSelector"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testResourceSelectorSimple"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testResourceSelectorSelresTrue"));*/
	//excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testResourceSelectorSelresFalse"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testResourceSelectorScenarioSimple"));
	//excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testSeldirs"));
	//excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testScenario1"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testScenarioCoreSelectorDefaults"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testScenarioCoreSelectorSettings"));
	excludes.add(new UnitTest(base + "types.selectors.ModifiedSelectorTest", "testScenarioCustomSelectorSettings"));

	excludes.add(new UnitTest(base + "util.FileUtilsTest", "testToURI"));

	return excludes;
    }

    public void buildMasterSuite ()
    {
	try
	{
	    //Get a list of all of the files in org.apache.tools and its subdirectories
	    HashSet<String> filenames = listContainedFiles(new File(testDir));
	    
	    //For every file, add its tests to unitTests
	    for (String f : filenames)
	    {
		Class c;
		try
		{
		    c = Class.forName(f);
		}
		catch (ClassNotFoundException e)
		{
		    System.out.println("Class not found: " + f);
		    continue;
		}

	        try
		{
		    identifyTestMethods((TestSuite)((c.getMethod("suite")).invoke(null)));
		}
		catch (NoSuchMethodException e)
		{
		    identifyTestMethods(new TestSuite(c));
		    continue;
		}
		catch (ClassCastException e)
		{
		    System.out.println("Class is not a test suite/case: " + f);
		    continue;
		}
	    }
	}
	catch (Exception e)
	{
	    System.out.println("Could not generate a list of test methods");
	    e.printStackTrace();
	}
    }

    public HashSet<String> listContainedFiles (File f) throws Exception
    {
	HashSet<String> filenames = new HashSet<String>();
	File [] contents = f.listFiles();

	for (File c : contents)
	{
	    if (c.isFile())
	    {
		String name = c.getCanonicalPath();
		String extension = name.substring(name.length() - 5, name.length());

		if (extension.equals(".java"))
		{
		    name = name.substring(75, name.length() - 5);
		    name = name.replace("/", ".");
		    if (!name.equals("org.apache.tools.ant.taskdefs.optional.image.ImageTest"))
		    {
			filenames.add(name);
		    }
		}
	    }

	    else
	    {
		filenames.addAll(listContainedFiles(c));
	    }
	}

	return filenames;
    }
   
    public void identifyTestMethods (Test t)
    {
	if (t instanceof TestSuite)
        {       
            for (Enumeration<Test> e = ((TestSuite)t).tests(); e.hasMoreElements(); )
            {
                identifyTestMethods (e.nextElement());
            }         
        }
        
        else if (t instanceof TestCase)
        {          
            //We can only use this class if it has a constructor that takes one string
            Class c = t.getClass();
            Constructor[] allConstructors = c.getDeclaredConstructors();
            for (Constructor ctor : allConstructors)
            {
                Class [] types = ctor.getParameterTypes();
                if (types.length == 1 && types[0] == String.class)
                {
                    //It does, so look for test methods
		    String classname = c.getName();
		    Method[] allMethods = c.getDeclaredMethods();
                   			
		    for (Method mthd : allMethods)
		    {
			//We only want methods that 
			//1. take no parameters
			//2. start with "test" (this is required by JUnit 3, not arbitrary)
			//3. are not already in unitTests
			//4. are not in the list of excluded tests
			String methodname = mthd.getName();
			Class [] params = mthd.getParameterTypes();
			if (params.length == 0 && methodname.startsWith("test"))
			{
			    UnitTest ut = new UnitTest(classname, methodname);
			    if (!unitTests.contains(ut) && !excludedTests.contains(ut))
			    {
				unitTests.add(ut);

				//Sanity check: ant has ~1500 tests
				if (unitTests.size() > 2000)
				{
				    System.out.println ("You're adding duplicate methods");
				    System.exit(1);
				}
			    }
			}
 		    }
		}
	    }
        }
            
        else
        {
            assert false : "Test suite is ill-formed";
        }   
    }

    public void writeMasterSuite () throws Exception
    {
        System.out.println("Writing out master suite...");
        BufferedWriter outfile = new BufferedWriter(new FileWriter(testDir + "MasterTestSuite.java"));
        outfile.write(buildFileHeader("MasterTestSuite"));
        
	//Each method adds at most 100 tests to the suite to avoid hitting method length limits
        int methodCounter = 0;
        for (int i = 0; i < unitTests.size(); i++)
        {
            if (i % 100 == 0)
            {
                outfile.write("\n\npublic static void addMethods" + methodCounter + " () {");
                methodCounter++;
            }
            UnitTest t = unitTests.get(i);
            outfile.write("randomSuite.addTest(new " + t.classname + "(\"" + t.methodname + "\"));" + "\n");
            if (i % 100 == 99 || i == (unitTests.size() - 1))
            {
                outfile.write("}");
            }
        }

        outfile.write("\n\npublic static Test suite(){\nrandomSuite = new TestSuite();\n");
        for (int i = 0; i < methodCounter; i++)
        {
            outfile.write("addMethods" + i + "();\n");
        }
        outfile.write("return randomSuite;}}");
        
        outfile.close();
        System.out.println("Finished writing master suite");
    }
    
    public static String buildFileHeader(String classname)
    {
        return "package org.apache.tools;" +
        "\nimport junit.framework.*;" +
        "\npublic class " + classname + " extends TestCase {" + 
        "\nstatic TestSuite randomSuite;" +
        "\npublic " + classname + "(String testname) {super(testname);}";
    }
    
    private static class UnitTest
    {
        String classname;
        String methodname;
        
        public UnitTest (String c, String m)
        {
            classname = c;
            methodname = m;
        }

	public boolean equals (Object o)
	{
	    if (o instanceof UnitTest)
	    {
		UnitTest u = (UnitTest)o;
		if ( (u.classname).equals(this.classname) && (u.methodname).equals(this.methodname) )
		{
		    return true;
		}
	    }
	    return false;
	}
    }
}
