/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------
 * ServletUtilities.java
 * ---------------------
 * (C) Copyright 2002-2007, by Richard Atkinson and Contributors.
 *
 * Original Author:  Richard Atkinson;
 * Contributor(s):   J?rgen Hoffman;
 *                   David Gilbert (for Object Refinery Limited);
 *                   Douglas Clayton;
 *
 * Changes
 * -------
 * 19-Aug-2002 : Version 1;
 * 20-Apr-2003 : Added additional sendTempFile method to allow MIME type 
 *               specification and modified original sendTempFile method to 
 *               automatically set MIME type for JPEG and PNG files
 * 23-Jun-2003 : Added additional sendTempFile method at the request of 
 *               J?rgen Hoffman;
 * 07-Jul-2003 : Added more header information to streamed images;
 * 19-Aug-2003 : Forced images to be stored in the temporary directory defined 
 *               by System property java.io.tmpdir, rather than default (RA);
 * 24-Mar-2004 : Added temp filename prefix attribute (DG);
 * 09-Mar-2005 : Added "one time" file option (DG);
 * ------------- JFREECHART 1.0.x RELEASED ------------------------------------
 * 10-Jan-2006 : Updated API docs and reformatted (DG);
 * 13-Sep-2006 : Format date in response header in English, not locale default
 *               (see bug 1557141) (DG);
 *
 */

package org.jfree.chart.servlet;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;

/**
 * Utility class used for servlet related JFreeChart operations.
 */
public class ServletUtilities {
  static {
    CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.ping();
  }


    /** The filename prefix. */
    private static String tempFilePrefix = "jfreechart-";
  static {
    CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[1]++;
  }
    
    /** A prefix for "one time" charts. */
    private static String tempOneTimeFilePrefix = "jfreechart-onetime-";
  static {
    CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[2]++;
  }
    
    /**
     * Returns the prefix for the temporary file names generated by this class.
     * 
     * @return The prefix (never <code>null</code>).
     */
    public static String getTempFilePrefix() {
        return ServletUtilities.tempFilePrefix;   
    }
    
    /**
     * Sets the prefix for the temporary file names generated by this class.
     * 
     * @param prefix  the prefix (<code>null</code> not permitted).
     */
    public static void setTempFilePrefix(String prefix) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[3]++;
int CodeCoverConditionCoverageHelper_C1;
        if ((((((CodeCoverConditionCoverageHelper_C1 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C1 |= (2)) == 0 || true) &&
 ((prefix == null) && 
  ((CodeCoverConditionCoverageHelper_C1 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[1].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C1, 1) || true)) || (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[1].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C1, 1) && false)) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[1]++;
            throw new IllegalArgumentException("Null 'prefix' argument.");
   
        } else {
  CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[2]++;}
        ServletUtilities.tempFilePrefix = prefix;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[4]++;
    }
    
    /**
     * Returns the prefix for "one time" temporary file names generated by
     * this class.
     * 
     * @return The prefix.
     */
    public static String getTempOneTimeFilePrefix() {
        return ServletUtilities.tempOneTimeFilePrefix;
    }
    
    /**
     * Sets the prefix for the "one time" temporary file names generated by 
     * this class.
     * 
     * @param prefix  the prefix (<code>null</code> not permitted).
     */
    public static void setTempOneTimeFilePrefix(String prefix) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[5]++;
int CodeCoverConditionCoverageHelper_C2;
        if ((((((CodeCoverConditionCoverageHelper_C2 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C2 |= (2)) == 0 || true) &&
 ((prefix == null) && 
  ((CodeCoverConditionCoverageHelper_C2 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[2].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C2, 1) || true)) || (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[2].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C2, 1) && false)) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[3]++;
            throw new IllegalArgumentException("Null 'prefix' argument.");
   
        } else {
  CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[4]++;}
        ServletUtilities.tempOneTimeFilePrefix = prefix;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[6]++;
    }
    
    /**
     * Saves the chart as a PNG format file in the temporary directory.
     *
     * @param chart  the JFreeChart to be saved.
     * @param width  the width of the chart.
     * @param height  the height of the chart.
     * @param session  the HttpSession of the client (if <code>null</code>, the
     *                 temporary file is marked as "one-time" and deleted by 
     *                 the {@link DisplayChart} servlet right after it is
     *                 streamed to the client).
     *
     * @return The filename of the chart saved in the temporary directory.
     *
     * @throws IOException if there is a problem saving the file.
     */
    public static String saveChartAsPNG(JFreeChart chart, int width, int height,
            HttpSession session) throws IOException {
        
        return ServletUtilities.saveChartAsPNG(chart, width, height, null, 
                session);
        
    }

    /**
     * Saves the chart as a PNG format file in the temporary directory and
     * populates the {@link ChartRenderingInfo} object which can be used to 
     * generate an HTML image map.
     *
     * @param chart  the chart to be saved (<code>null</code> not permitted).
     * @param width  the width of the chart.
     * @param height  the height of the chart.
     * @param info  the ChartRenderingInfo object to be populated 
     *              (<code>null</code> permitted).
     * @param session  the HttpSession of the client (if <code>null</code>, the
     *                 temporary file is marked as "one-time" and deleted by 
     *                 the {@link DisplayChart} servlet right after it is
     *                 streamed to the client).
     *
     * @return The filename of the chart saved in the temporary directory.
     *
     * @throws IOException if there is a problem saving the file.
     */
    public static String saveChartAsPNG(JFreeChart chart, int width, int height,
            ChartRenderingInfo info, HttpSession session) throws IOException {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[7]++;
int CodeCoverConditionCoverageHelper_C3;

        if ((((((CodeCoverConditionCoverageHelper_C3 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C3 |= (2)) == 0 || true) &&
 ((chart == null) && 
  ((CodeCoverConditionCoverageHelper_C3 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[3].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C3, 1) || true)) || (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[3].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C3, 1) && false)) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[5]++;
            throw new IllegalArgumentException("Null 'chart' argument.");
   
        } else {
  CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[6]++;}
        ServletUtilities.createTempDir();
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[8]++;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[9]++;
        String prefix = ServletUtilities.tempFilePrefix;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[10]++;
int CodeCoverConditionCoverageHelper_C4;
        if ((((((CodeCoverConditionCoverageHelper_C4 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C4 |= (2)) == 0 || true) &&
 ((session == null) && 
  ((CodeCoverConditionCoverageHelper_C4 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[4].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C4, 1) || true)) || (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[4].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C4, 1) && false)) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[7]++;
            prefix = ServletUtilities.tempOneTimeFilePrefix;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[11]++;

        } else {
  CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[8]++;}
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[12]++;
        File tempFile = File.createTempFile(prefix, ".png", 
                new File(System.getProperty("java.io.tmpdir")));
        ChartUtilities.saveChartAsPNG(tempFile, chart, width, height, info);
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[13]++;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[14]++;
int CodeCoverConditionCoverageHelper_C5;
        if ((((((CodeCoverConditionCoverageHelper_C5 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C5 |= (2)) == 0 || true) &&
 ((session != null) && 
  ((CodeCoverConditionCoverageHelper_C5 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[5].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C5, 1) || true)) || (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[5].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C5, 1) && false)) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[9]++;
            ServletUtilities.registerChartForDeletion(tempFile, session);
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[15]++;

        } else {
  CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[10]++;}
        return tempFile.getName();

    }

    /**
     * Saves the chart as a JPEG format file in the temporary directory.
     * <p>
     * SPECIAL NOTE: Please avoid using JPEG as an image format for charts,
     * it is a "lossy" format that introduces visible distortions in the
     * resulting image - use PNG instead.  In addition, note that JPEG output
     * is supported by JFreeChart only for JRE 1.4.2 or later.
     * 
     * @param chart  the JFreeChart to be saved.
     * @param width  the width of the chart.
     * @param height  the height of the chart.
     * @param session  the HttpSession of the client (if <code>null</code>, the
     *                 temporary file is marked as "one-time" and deleted by 
     *                 the {@link DisplayChart} servlet right after it is
     *                 streamed to the client).
     *
     * @return The filename of the chart saved in the temporary directory.
     *
     * @throws IOException if there is a problem saving the file.
     */
    public static String saveChartAsJPEG(JFreeChart chart, int width, 
                                         int height, HttpSession session) 
            throws IOException {

        return ServletUtilities.saveChartAsJPEG(chart, width, height, null, 
                session);
        
    }

    /**
     * Saves the chart as a JPEG format file in the temporary directory and
     * populates the <code>ChartRenderingInfo</code> object which can be used 
     * to generate an HTML image map.
     * <p>
     * SPECIAL NOTE: Please avoid using JPEG as an image format for charts,
     * it is a "lossy" format that introduces visible distortions in the
     * resulting image - use PNG instead.  In addition, note that JPEG output
     * is supported by JFreeChart only for JRE 1.4.2 or later.
     *
     * @param chart  the chart to be saved (<code>null</code> not permitted).
     * @param width  the width of the chart
     * @param height  the height of the chart
     * @param info  the ChartRenderingInfo object to be populated
     * @param session  the HttpSession of the client (if <code>null</code>, the
     *                 temporary file is marked as "one-time" and deleted by 
     *                 the {@link DisplayChart} servlet right after it is
     *                 streamed to the client).
     *
     * @return The filename of the chart saved in the temporary directory
     *
     * @throws IOException if there is a problem saving the file.
     */
    public static String saveChartAsJPEG(JFreeChart chart, int width, 
            int height, ChartRenderingInfo info, HttpSession session)
            throws IOException {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[16]++;
int CodeCoverConditionCoverageHelper_C6;

        if ((((((CodeCoverConditionCoverageHelper_C6 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C6 |= (2)) == 0 || true) &&
 ((chart == null) && 
  ((CodeCoverConditionCoverageHelper_C6 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[6].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C6, 1) || true)) || (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[6].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C6, 1) && false)) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[11]++;
            throw new IllegalArgumentException("Null 'chart' argument.");
   
        } else {
  CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[12]++;}
        
        ServletUtilities.createTempDir();
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[17]++;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[18]++;
        String prefix = ServletUtilities.tempFilePrefix;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[19]++;
int CodeCoverConditionCoverageHelper_C7;
        if ((((((CodeCoverConditionCoverageHelper_C7 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C7 |= (2)) == 0 || true) &&
 ((session == null) && 
  ((CodeCoverConditionCoverageHelper_C7 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[7].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C7, 1) || true)) || (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[7].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C7, 1) && false)) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[13]++;
            prefix = ServletUtilities.tempOneTimeFilePrefix;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[20]++;
   
        } else {
  CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[14]++;}
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[21]++;
        File tempFile = File.createTempFile(prefix, ".jpeg", 
                new File(System.getProperty("java.io.tmpdir")));
        ChartUtilities.saveChartAsJPEG(tempFile, chart, width, height, info);
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[22]++;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[23]++;
int CodeCoverConditionCoverageHelper_C8;
        if ((((((CodeCoverConditionCoverageHelper_C8 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C8 |= (2)) == 0 || true) &&
 ((session != null) && 
  ((CodeCoverConditionCoverageHelper_C8 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[8].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C8, 1) || true)) || (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[8].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C8, 1) && false)) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[15]++;
            ServletUtilities.registerChartForDeletion(tempFile, session);
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[24]++;

        } else {
  CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[16]++;}
        return tempFile.getName();

    }

    /**
     * Creates the temporary directory if it does not exist.  Throws a 
     * <code>RuntimeException</code> if the temporary directory is 
     * <code>null</code>.  Uses the system property <code>java.io.tmpdir</code> 
     * as the temporary directory.  This sounds like a strange thing to do but 
     * my temporary directory was not created on my default Tomcat 4.0.3 
     * installation.  Could save some questions on the forum if it is created 
     * when not present.
     */
    protected static void createTempDir() {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[25]++;
        String tempDirName = System.getProperty("java.io.tmpdir");
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[26]++;
int CodeCoverConditionCoverageHelper_C9;
        if ((((((CodeCoverConditionCoverageHelper_C9 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C9 |= (2)) == 0 || true) &&
 ((tempDirName == null) && 
  ((CodeCoverConditionCoverageHelper_C9 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[9].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C9, 1) || true)) || (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[9].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C9, 1) && false)) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[17]++;
            throw new RuntimeException("Temporary directory system property " 
                    + "(java.io.tmpdir) is null.");

        } else {
  CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[18]++;}
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[27]++;

        // create the temporary directory if it doesn't exist
        File tempDir = new File(tempDirName);
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[28]++;
int CodeCoverConditionCoverageHelper_C10;
        if ((((((CodeCoverConditionCoverageHelper_C10 = 0) == 0) || true) && (!
(((CodeCoverConditionCoverageHelper_C10 |= (2)) == 0 || true) &&
 ((tempDir.exists()) && 
  ((CodeCoverConditionCoverageHelper_C10 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[10].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C10, 1) || true)) || (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[10].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C10, 1) && false)) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[19]++;
            tempDir.mkdirs();
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[29]++;

        } else {
  CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[20]++;}
    }

    /**
     * Adds a {@link ChartDeleter} object to the session object with the name 
     * <code>JFreeChart_Deleter</code> if there is not already one bound to the 
     * session and adds the filename to the list of charts to be deleted.
     *
     * @param tempFile  the file to be deleted.
     * @param session  the HTTP session of the client.
     */
    protected static void registerChartForDeletion(File tempFile, 
            HttpSession session) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[30]++;
int CodeCoverConditionCoverageHelper_C11;

        //  Add chart to deletion list in session
        if ((((((CodeCoverConditionCoverageHelper_C11 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C11 |= (2)) == 0 || true) &&
 ((session != null) && 
  ((CodeCoverConditionCoverageHelper_C11 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[11].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C11, 1) || true)) || (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[11].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C11, 1) && false)) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[21]++;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[31]++;
            ChartDeleter chartDeleter 
                = (ChartDeleter) session.getAttribute("JFreeChart_Deleter");
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[32]++;
int CodeCoverConditionCoverageHelper_C12;
            if ((((((CodeCoverConditionCoverageHelper_C12 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C12 |= (2)) == 0 || true) &&
 ((chartDeleter == null) && 
  ((CodeCoverConditionCoverageHelper_C12 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[12].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C12, 1) || true)) || (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[12].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C12, 1) && false)) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[23]++;
                chartDeleter = new ChartDeleter();
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[33]++;
                session.setAttribute("JFreeChart_Deleter", chartDeleter);
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[34]++;

            } else {
  CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[24]++;}
            chartDeleter.addChart(tempFile.getName());
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[35]++;

        }
        else {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[22]++;
            System.out.println("Session is null - chart will not be deleted");
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[36]++;
        }
    }

    /**
     * Binary streams the specified file in the temporary directory to the
     * HTTP response in 1KB chunks.
     * 
     * @param filename  the name of the file in the temporary directory.
     * @param response  the HTTP response object.
     * 
     * @throws IOException  if there is an I/O problem.
     */
    public static void sendTempFile(String filename, 
            HttpServletResponse response) throws IOException {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[37]++;

        File file = new File(System.getProperty("java.io.tmpdir"), filename);
        ServletUtilities.sendTempFile(file, response);
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[38]++;
    }

    /**
     * Binary streams the specified file to the HTTP response in 1KB chunks.
     *
     * @param file  the file to be streamed.
     * @param response  the HTTP response object.
     *
     * @throws IOException if there is an I/O problem.
     */
    public static void sendTempFile(File file, HttpServletResponse response)
            throws IOException {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[39]++;

        String mimeType = null;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[40]++;
        String filename = file.getName();
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[41]++;
int CodeCoverConditionCoverageHelper_C13;
        if ((((((CodeCoverConditionCoverageHelper_C13 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C13 |= (2)) == 0 || true) &&
 ((filename.length() > 5) && 
  ((CodeCoverConditionCoverageHelper_C13 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[13].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C13, 1) || true)) || (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[13].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C13, 1) && false)) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[25]++;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[42]++;
int CodeCoverConditionCoverageHelper_C14;
            if ((((((CodeCoverConditionCoverageHelper_C14 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C14 |= (2)) == 0 || true) &&
 ((filename.substring(filename.length() - 5, 
                    filename.length()).equals(".jpeg")) && 
  ((CodeCoverConditionCoverageHelper_C14 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[14].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C14, 1) || true)) || (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[14].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C14, 1) && false)) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[27]++;
                mimeType = "image/jpeg";
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[43]++;

            } 
            else {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[28]++;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[44]++;
int CodeCoverConditionCoverageHelper_C15; if ((((((CodeCoverConditionCoverageHelper_C15 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C15 |= (2)) == 0 || true) &&
 ((filename.substring(filename.length() - 4, 
                    filename.length()).equals(".png")) && 
  ((CodeCoverConditionCoverageHelper_C15 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[15].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C15, 1) || true)) || (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[15].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C15, 1) && false)) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[29]++;
                mimeType = "image/png";
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[45]++;

            } else {
  CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[30]++;}
}

        } else {
  CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[26]++;}
        ServletUtilities.sendTempFile(file, response, mimeType);
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[46]++;
    }

    /**
     * Binary streams the specified file to the HTTP response in 1KB chunks.
     *
     * @param file  the file to be streamed.
     * @param response  the HTTP response object.
     * @param mimeType  the mime type of the file, null allowed.
     *
     * @throws IOException if there is an I/O problem.
     */
    public static void sendTempFile(File file, HttpServletResponse response,
                                    String mimeType) throws IOException {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[47]++;
int CodeCoverConditionCoverageHelper_C16;

        if ((((((CodeCoverConditionCoverageHelper_C16 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C16 |= (2)) == 0 || true) &&
 ((file.exists()) && 
  ((CodeCoverConditionCoverageHelper_C16 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[16].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C16, 1) || true)) || (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[16].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C16, 1) && false)) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[31]++;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[48]++;
            BufferedInputStream bis = new BufferedInputStream(
                    new FileInputStream(file));
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[49]++;
int CodeCoverConditionCoverageHelper_C17;

            //  Set HTTP headers
            if ((((((CodeCoverConditionCoverageHelper_C17 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C17 |= (2)) == 0 || true) &&
 ((mimeType != null) && 
  ((CodeCoverConditionCoverageHelper_C17 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[17].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C17, 1) || true)) || (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[17].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C17, 1) && false)) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[33]++;
                response.setHeader("Content-Type", mimeType);
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[50]++;

            } else {
  CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[34]++;}
            response.setHeader("Content-Length", String.valueOf(file.length()));
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[51]++;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[52]++;
            SimpleDateFormat sdf = new SimpleDateFormat(
                    "EEE, dd MMM yyyy HH:mm:ss z", Locale.ENGLISH);
            sdf.setTimeZone(TimeZone.getTimeZone("GMT"));
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[53]++;
            response.setHeader("Last-Modified", 
                    sdf.format(new Date(file.lastModified())));
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[54]++;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[55]++;

            BufferedOutputStream bos = new BufferedOutputStream(
                    response.getOutputStream());
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[56]++;
            byte[] input = new byte[1024];
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[57]++;
            boolean eof = false;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[58]++;
byte CodeCoverTryBranchHelper_L1 = 0;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.loops[1]++;


int CodeCoverConditionCoverageHelper_C18;
            while ((((((CodeCoverConditionCoverageHelper_C18 = 0) == 0) || true) && (!
(((CodeCoverConditionCoverageHelper_C18 |= (2)) == 0 || true) &&
 ((eof) && 
  ((CodeCoverConditionCoverageHelper_C18 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[18].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C18, 1) || true)) || (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[18].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C18, 1) && false)) {
if (CodeCoverTryBranchHelper_L1 == 0) {
  CodeCoverTryBranchHelper_L1++;
  CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.loops[1]--;
  CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.loops[2]++;
} else if (CodeCoverTryBranchHelper_L1 == 1) {
  CodeCoverTryBranchHelper_L1++;
  CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.loops[2]--;
  CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.loops[3]++;
}
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[59]++;
                int length = bis.read(input);
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[60]++;
int CodeCoverConditionCoverageHelper_C19;
                if ((((((CodeCoverConditionCoverageHelper_C19 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C19 |= (2)) == 0 || true) &&
 ((length == -1) && 
  ((CodeCoverConditionCoverageHelper_C19 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[19].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C19, 1) || true)) || (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[19].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C19, 1) && false)) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[35]++;
                    eof = true;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[61]++;

                } 
                else {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[36]++;
                    bos.write(input, 0, length);
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[62]++;
                }
            }
            bos.flush();
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[63]++;
            bis.close();
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[64]++;
            bos.close();
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[65]++;

        }
        else {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[32]++;
            throw new FileNotFoundException(file.getAbsolutePath());
        }
        return;
    }

    /**
     * Perform a search/replace operation on a String
     * There are String methods to do this since (JDK 1.4)
     *
     * @param inputString  the String to have the search/replace operation.
     * @param searchString  the search String.
     * @param replaceString  the replace String.
     *
     * @return The String with the replacements made.
     */
    public static String searchReplace(String inputString,
                                       String searchString,
                                       String replaceString) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[66]++;

        int i = inputString.indexOf(searchString);
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[67]++;
int CodeCoverConditionCoverageHelper_C20;
        if ((((((CodeCoverConditionCoverageHelper_C20 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C20 |= (2)) == 0 || true) &&
 ((i == -1) && 
  ((CodeCoverConditionCoverageHelper_C20 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[20].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C20, 1) || true)) || (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[20].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C20, 1) && false)) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[37]++;
            return inputString;

        } else {
  CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[38]++;}
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[68]++;

        String r = "";
        r += inputString.substring(0, i) + replaceString;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[69]++;
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[70]++;
int CodeCoverConditionCoverageHelper_C21;
        if ((((((CodeCoverConditionCoverageHelper_C21 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C21 |= (2)) == 0 || true) &&
 ((i + searchString.length() < inputString.length()) && 
  ((CodeCoverConditionCoverageHelper_C21 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[21].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C21, 1) || true)) || (CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.conditionCounters[21].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C21, 1) && false)) {
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[39]++;
            r += searchReplace(inputString.substring(i + searchString.length()),
                    searchString, replaceString);
CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.statements[71]++;

        } else {
  CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap.branches[40]++;}

        return r;
    }

}

class CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap extends org.codecover.instrumentation.java.measurement.CounterContainer {

  static {
    org.codecover.instrumentation.java.measurement.ProtocolImpl.getInstance(org.codecover.instrumentation.java.measurement.CoverageResultLogFile.getInstance(null), "fc723371-5766-4804-90bc-1687dd8f2639").addObservedContainer(new CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap ());
  }
    public static long[] statements = new long[72];
    public static long[] branches = new long[41];

  public static final org.codecover.instrumentation.java.measurement.ConditionCounter[] conditionCounters = new org.codecover.instrumentation.java.measurement.ConditionCounter[22];
  static {
    final String SECTION_NAME = "org.jfree.chart.servlet.ServletUtilities.java";
    final byte[] CONDITION_COUNTER_TYPES = {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
    for (int i = 1; i <= 21; i++) {
      switch (CONDITION_COUNTER_TYPES[i]) {
        case 0 : break;
        case 1 : conditionCounters[i] = new org.codecover.instrumentation.java.measurement.SmallOneConditionCounter(SECTION_NAME, "C" + i); break;
        case 2 : conditionCounters[i] = new org.codecover.instrumentation.java.measurement.SmallTwoConditionCounter(SECTION_NAME, "C" + i); break;
        case 3 : conditionCounters[i] = new org.codecover.instrumentation.java.measurement.MediumConditionCounter(SECTION_NAME, "C" + i); break;
        case 4 : conditionCounters[i] = new org.codecover.instrumentation.java.measurement.LargeConditionCounter(SECTION_NAME, "C" + i); break;
      }
    }
  }
    public static long[] loops = new long[4];

  public CodeCoverCoverageCounter$1x9uq8emuwwutlfov1x1g7n77p5atimap () {
    super("org.jfree.chart.servlet.ServletUtilities.java");
  }

  public static void ping() {/* nothing to do*/}

  public void reset() {
      for (int i = 1; i <= 71; i++) {
        statements[i] = 0L;
      }
      for (int i = 1; i <= 40; i++) {
        branches[i] = 0L;
      }
    for (int i = 1; i <= 21; i++) {
      if (conditionCounters[i] != null) {
        conditionCounters[i].reset();
      }
    }
      for (int i = 1; i <= 3; i++) {
        loops[i] = 0L;
      }
  }

  public void serializeAndReset(org.codecover.instrumentation.measurement.CoverageCounterLog log) {
    log.startNamedSection("org.jfree.chart.servlet.ServletUtilities.java");
      for (int i = 1; i <= 71; i++) {
        if (statements[i] != 0L) {
          log.passCounter("S" + i, statements[i]);
          statements[i] = 0L;
        }
      }
      for (int i = 1; i <= 40; i++) {
        if (branches[i] != 0L) {
          log.passCounter("B"+ i, branches[i]);
          branches[i] = 0L;
        }
      }
    for (int i = 1; i <= 21; i++) {
      if (conditionCounters[i] != null) {
        conditionCounters[i].serializeAndReset(log);
      }
    }
      for (int i = 1; i <= 1; i++) {
        if (loops[i * 3 - 2] != 0L) {
          log.passCounter("L" + i + "-0", loops[i * 3 - 2]);
          loops[i * 3 - 2] = 0L;
        }
        if ( loops[i * 3 - 1] != 0L) {
          log.passCounter("L" + i + "-1", loops[i * 3 - 1]);
          loops[i * 3 - 1] = 0L;
        }
        if ( loops[i * 3] != 0L) {
          log.passCounter("L" + i + "-2", loops[i * 3]);
          loops[i * 3] = 0L;
        }
      }
  }
}

