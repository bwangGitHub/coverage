/*
 * Copyright 2006 The Closure Compiler Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

/**
 * Tries to chain assignments together.
 *
 * @author nicksantos@google.com (Nick Santos)
 * @author acleung@google.com (Alan Leung)
 *
 */
class ExploitAssigns extends AbstractPeepholeOptimization {
  static {
    CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.ping();
  }


  @Override
  Node optimizeSubtree(Node subtree) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[1]++;
byte CodeCoverTryBranchHelper_L1 = 0;
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.loops[1]++;


int CodeCoverConditionCoverageHelper_C1;
    for (Node child = subtree.getFirstChild();(((((CodeCoverConditionCoverageHelper_C1 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C1 |= (2)) == 0 || true) &&
 ((child != null) && 
  ((CodeCoverConditionCoverageHelper_C1 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[1].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C1, 1) || true)) || (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[1].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C1, 1) && false);) {
if (CodeCoverTryBranchHelper_L1 == 0) {
  CodeCoverTryBranchHelper_L1++;
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.loops[1]--;
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.loops[2]++;
} else if (CodeCoverTryBranchHelper_L1 == 1) {
  CodeCoverTryBranchHelper_L1++;
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.loops[2]--;
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.loops[3]++;
}
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[2]++;
      Node next = child.getNext();
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[3]++;
int CodeCoverConditionCoverageHelper_C2;
      if ((((((CodeCoverConditionCoverageHelper_C2 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C2 |= (2)) == 0 || true) &&
 ((NodeUtil.isExprAssign(child)) && 
  ((CodeCoverConditionCoverageHelper_C2 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[2].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C2, 1) || true)) || (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[2].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C2, 1) && false)) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[1]++;
        collapseAssign(child.getFirstChild(), child, subtree);
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[4]++;

      } else {
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[2]++;}
      child = next;
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[5]++;
    }
    return subtree;
  }

  /**
   * Try to collapse the given assign into subsequent expressions.
   */
  private void collapseAssign(Node assign, Node expr,
      Node exprParent) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[6]++;
    Node leftValue = assign.getFirstChild();
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[7]++;
    Node rightValue = leftValue.getNext();
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[8]++;
int CodeCoverConditionCoverageHelper_C3;
    if ((((((CodeCoverConditionCoverageHelper_C3 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C3 |= (8)) == 0 || true) &&
 ((isCollapsibleValue(leftValue, true)) && 
  ((CodeCoverConditionCoverageHelper_C3 |= (4)) == 0 || true)))
 && 
(((CodeCoverConditionCoverageHelper_C3 |= (2)) == 0 || true) &&
 ((collapseAssignEqualTo(expr, exprParent, leftValue)) && 
  ((CodeCoverConditionCoverageHelper_C3 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[3].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C3, 2) || true)) || (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[3].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C3, 2) && false)) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[3]++;
      reportCodeChange();
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[9]++;

    } else {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[4]++;
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[10]++;
int CodeCoverConditionCoverageHelper_C4; if ((((((CodeCoverConditionCoverageHelper_C4 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C4 |= (8)) == 0 || true) &&
 ((isCollapsibleValue(rightValue, false)) && 
  ((CodeCoverConditionCoverageHelper_C4 |= (4)) == 0 || true)))
 && 
(((CodeCoverConditionCoverageHelper_C4 |= (2)) == 0 || true) &&
 ((collapseAssignEqualTo(expr, exprParent, rightValue)) && 
  ((CodeCoverConditionCoverageHelper_C4 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[4].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C4, 2) || true)) || (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[4].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C4, 2) && false)) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[5]++;
      reportCodeChange();
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[11]++;

    } else {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[6]++;
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[12]++;
int CodeCoverConditionCoverageHelper_C5; if ((((((CodeCoverConditionCoverageHelper_C5 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C5 |= (2)) == 0 || true) &&
 ((rightValue.isAssign()) && 
  ((CodeCoverConditionCoverageHelper_C5 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[5].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C5, 1) || true)) || (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[5].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C5, 1) && false)) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[7]++;
      // Recursively deal with nested assigns.
      collapseAssign(rightValue, expr, exprParent);
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[13]++;

    } else {
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[8]++;}
}
}
  }

  /**
   * Determines whether we know enough about the given value to be able
   * to collapse it into subsequent expressions.
   *
   * For example, we can collapse booleans and variable names:
   * <code>
   * x = 3; y = x; // y = x = 3;
   * a = true; b = true; // b = a = true;
   * <code>
   * But we won't try to collapse complex expressions.
   *
   * @param value The value node.
   * @param isLValue Whether it's on the left-hand side of an expr.
   */
  private boolean isCollapsibleValue(Node value, boolean isLValue) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[14]++;
    switch (value.getType()) {
      case Token.GETPROP:
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[9]++;
        // Do not collapse GETPROPs on arbitrary objects, because
        // they may be implemented setter functions, and oftentimes
        // setter functions fail on native objects. This is OK for "THIS"
        // objects, because we assume that they are non-native.
        return !isLValue || value.getFirstChild().isThis();

      case Token.NAME:
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[10]++;
        return true;

      default:
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[11]++;
        return NodeUtil.isImmutableValue(value);
    }
  }

  /**
   * Collapse the given assign expression into the expression directly
   * following it, if possible.
   *
   * @param expr The expression that may be moved.
   * @param exprParent The parent of {@code expr}.
   * @param value The value of this expression, expressed as a node. Each
   *     expression may have multiple values, so this function may be called
   *     multiple times for the same expression. For example,
   *     <code>
   *     a = true;
   *     </code>
   *     is equal to the name "a" and the boolean "true".
   * @return Whether the expression was collapsed successfully.
   */
  private boolean collapseAssignEqualTo(Node expr, Node exprParent,
      Node value) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[15]++;
    Node assign = expr.getFirstChild();
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[16]++;
    Node parent = exprParent;
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[17]++;
    Node next = expr.getNext();
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[18]++;
byte CodeCoverTryBranchHelper_L2 = 0;
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.loops[4]++;


int CodeCoverConditionCoverageHelper_C6;
    while ((((((CodeCoverConditionCoverageHelper_C6 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C6 |= (2)) == 0 || true) &&
 ((next != null) && 
  ((CodeCoverConditionCoverageHelper_C6 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[6].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C6, 1) || true)) || (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[6].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C6, 1) && false)) {
if (CodeCoverTryBranchHelper_L2 == 0) {
  CodeCoverTryBranchHelper_L2++;
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.loops[4]--;
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.loops[5]++;
} else if (CodeCoverTryBranchHelper_L2 == 1) {
  CodeCoverTryBranchHelper_L2++;
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.loops[5]--;
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.loops[6]++;
}
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[19]++;
      switch (next.getType()) {
        case Token.AND:
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[12]++;
        case Token.OR:
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[13]++;
        case Token.HOOK:
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[14]++;
        case Token.IF:
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[15]++;
        case Token.RETURN:
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[16]++;
        case Token.EXPR_RESULT:
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[17]++;
          // Dive down the left side
          parent = next;
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[20]++;
          next = next.getFirstChild();
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[21]++;
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[22]++;
          break;

        case Token.VAR:
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[18]++;
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[23]++;
int CodeCoverConditionCoverageHelper_C7;
          if ((((((CodeCoverConditionCoverageHelper_C7 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C7 |= (2)) == 0 || true) &&
 ((next.getFirstChild().hasChildren()) && 
  ((CodeCoverConditionCoverageHelper_C7 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[7].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C7, 1) || true)) || (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[7].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C7, 1) && false)) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[19]++;
            parent = next.getFirstChild();
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[24]++;
            next = parent.getFirstChild();
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[25]++;
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[26]++;
            break;

          } else {
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[20]++;}
          return false;

        case Token.GETPROP:
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[21]++;
        case Token.NAME:
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[22]++;
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[27]++;
int CodeCoverConditionCoverageHelper_C8;
          if ((((((CodeCoverConditionCoverageHelper_C8 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C8 |= (2)) == 0 || true) &&
 ((next.isQualifiedName()) && 
  ((CodeCoverConditionCoverageHelper_C8 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[8].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C8, 1) || true)) || (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[8].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C8, 1) && false)) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[23]++;
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[28]++;
            String nextName = next.getQualifiedName();
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[29]++;
int CodeCoverConditionCoverageHelper_C9;
            if ((((((CodeCoverConditionCoverageHelper_C9 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C9 |= (8)) == 0 || true) &&
 ((value.isQualifiedName()) && 
  ((CodeCoverConditionCoverageHelper_C9 |= (4)) == 0 || true)))
 && 
(((CodeCoverConditionCoverageHelper_C9 |= (2)) == 0 || true) &&
 ((nextName.equals(value.getQualifiedName())) && 
  ((CodeCoverConditionCoverageHelper_C9 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[9].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C9, 2) || true)) || (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[9].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C9, 2) && false)) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[25]++;
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[30]++;
int CodeCoverConditionCoverageHelper_C10;
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if ((((((CodeCoverConditionCoverageHelper_C10 = 0) == 0) || true) && (!
(((CodeCoverConditionCoverageHelper_C10 |= (2)) == 0 || true) &&
 ((isSafeReplacement(next, assign)) && 
  ((CodeCoverConditionCoverageHelper_C10 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[10].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C10, 1) || true)) || (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[10].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C10, 1) && false)) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[27]++;
                return false;

              } else {
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[28]++;}

              exprParent.removeChild(expr);
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[31]++;
              expr.removeChild(assign);
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[32]++;
              parent.replaceChild(next, assign);
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[33]++;
              return true;

            } else {
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[26]++;}

          } else {
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[24]++;}
          return false;

        case Token.ASSIGN:
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[29]++;
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[34]++;
          // Assigns are really tricky. In lots of cases, we want to inline
          // into the right side of the assign. But the left side of the
          // assign is evaluated first, and it may have convoluted logic:
          //   a = null;
          //   (a = b).c = null;
          // We don't want to exploit the first assign. Similarly:
          //   a.b = null;
          //   a.b.c = null;
          // We don't want to exploit the first assign either.
          //
          // To protect against this, we simply only inline when the left side
          // is guaranteed to evaluate to the same L-value no matter what.
          Node leftSide = next.getFirstChild();
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[35]++;
int CodeCoverConditionCoverageHelper_C11;
          if ((((((CodeCoverConditionCoverageHelper_C11 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C11 |= (32)) == 0 || true) &&
 ((leftSide.isName()) && 
  ((CodeCoverConditionCoverageHelper_C11 |= (16)) == 0 || true)))
 || 
(((CodeCoverConditionCoverageHelper_C11 |= (8)) == 0 || true) &&
 ((leftSide.isGetProp()) && 
  ((CodeCoverConditionCoverageHelper_C11 |= (4)) == 0 || true)))
 && 
(((CodeCoverConditionCoverageHelper_C11 |= (2)) == 0 || true) &&
 ((leftSide.getFirstChild().isThis()) && 
  ((CodeCoverConditionCoverageHelper_C11 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[11].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C11, 3) || true)) || (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[11].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C11, 3) && false)) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[30]++;
            // Dive down the right side of the assign.
            parent = next;
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[36]++;
            next = leftSide.getNext();
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[37]++;
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[38]++;
            break;

          } else {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[31]++;
            return false;
          }

        default:
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[32]++;
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[39]++;
int CodeCoverConditionCoverageHelper_C12;
          if ((((((CodeCoverConditionCoverageHelper_C12 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C12 |= (8)) == 0 || true) &&
 ((NodeUtil.isImmutableValue(next)) && 
  ((CodeCoverConditionCoverageHelper_C12 |= (4)) == 0 || true)))
 && 
(((CodeCoverConditionCoverageHelper_C12 |= (2)) == 0 || true) &&
 ((next.isEquivalentTo(value)) && 
  ((CodeCoverConditionCoverageHelper_C12 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[12].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C12, 2) || true)) || (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[12].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C12, 2) && false)) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[33]++;
            // If the r-value of the expr assign is an immutable value,
            // and the value is used again shortly, then we can exploit
            // the assign here.
            exprParent.removeChild(expr);
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[40]++;
            expr.removeChild(assign);
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[41]++;
            parent.replaceChild(next, assign);
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[42]++;
            return true;

          } else {
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[34]++;}
          // Return without inlining a thing
          return false;
      }
    }

    return false;
  }

  /**
   * Checks name referenced in node to determine if it might have
   * changed.
   * @return Whether the replacement can be made.
   */
  private boolean isSafeReplacement(Node node, Node replacement) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[43]++;
int CodeCoverConditionCoverageHelper_C13;
    // No checks are needed for simple names.
    if ((((((CodeCoverConditionCoverageHelper_C13 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C13 |= (2)) == 0 || true) &&
 ((node.isName()) && 
  ((CodeCoverConditionCoverageHelper_C13 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[13].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C13, 1) || true)) || (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[13].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C13, 1) && false)) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[35]++;
      return true;

    } else {
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[36]++;}
    Preconditions.checkArgument(node.isGetProp());
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[44]++;
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[45]++;

    Node name = node.getFirstChild();
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[46]++;
int CodeCoverConditionCoverageHelper_C14;
    if ((((((CodeCoverConditionCoverageHelper_C14 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C14 |= (8)) == 0 || true) &&
 ((name.isName()) && 
  ((CodeCoverConditionCoverageHelper_C14 |= (4)) == 0 || true)))
 && 
(((CodeCoverConditionCoverageHelper_C14 |= (2)) == 0 || true) &&
 ((isNameAssignedTo(name.getString(), replacement)) && 
  ((CodeCoverConditionCoverageHelper_C14 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[14].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C14, 2) || true)) || (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[14].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C14, 2) && false)) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[37]++;
      return false;

    } else {
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[38]++;}

    return true;
  }

  /**
   * @return Whether name is assigned in the expression rooted at node.
   */

  private boolean isNameAssignedTo(String name, Node node) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[47]++;
byte CodeCoverTryBranchHelper_L3 = 0;
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.loops[7]++;


int CodeCoverConditionCoverageHelper_C15;
    for (Node c = node.getFirstChild();(((((CodeCoverConditionCoverageHelper_C15 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C15 |= (2)) == 0 || true) &&
 ((c != null) && 
  ((CodeCoverConditionCoverageHelper_C15 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[15].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C15, 1) || true)) || (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[15].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C15, 1) && false); c = c.getNext()) {
if (CodeCoverTryBranchHelper_L3 == 0) {
  CodeCoverTryBranchHelper_L3++;
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.loops[7]--;
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.loops[8]++;
} else if (CodeCoverTryBranchHelper_L3 == 1) {
  CodeCoverTryBranchHelper_L3++;
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.loops[8]--;
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.loops[9]++;
}
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[48]++;
int CodeCoverConditionCoverageHelper_C16;
      if ((((((CodeCoverConditionCoverageHelper_C16 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C16 |= (2)) == 0 || true) &&
 ((isNameAssignedTo(name, c)) && 
  ((CodeCoverConditionCoverageHelper_C16 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[16].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C16, 1) || true)) || (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[16].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C16, 1) && false)) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[39]++;
        return true;

      } else {
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[40]++;}
    }
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[49]++;
int CodeCoverConditionCoverageHelper_C17;

    if ((((((CodeCoverConditionCoverageHelper_C17 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C17 |= (2)) == 0 || true) &&
 ((node.isName()) && 
  ((CodeCoverConditionCoverageHelper_C17 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[17].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C17, 1) || true)) || (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[17].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C17, 1) && false)) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[41]++;
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[50]++;
      Node parent = node.getParent();
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[51]++;
int CodeCoverConditionCoverageHelper_C18;
      if ((((((CodeCoverConditionCoverageHelper_C18 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C18 |= (8)) == 0 || true) &&
 ((parent.isAssign()) && 
  ((CodeCoverConditionCoverageHelper_C18 |= (4)) == 0 || true)))
 && 
(((CodeCoverConditionCoverageHelper_C18 |= (2)) == 0 || true) &&
 ((parent.getFirstChild() == node) && 
  ((CodeCoverConditionCoverageHelper_C18 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[18].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C18, 2) || true)) || (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[18].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C18, 2) && false)) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[43]++;
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.statements[52]++;
int CodeCoverConditionCoverageHelper_C19;
        if ((((((CodeCoverConditionCoverageHelper_C19 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C19 |= (2)) == 0 || true) &&
 ((name.equals(node.getString())) && 
  ((CodeCoverConditionCoverageHelper_C19 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[19].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C19, 1) || true)) || (CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.conditionCounters[19].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C19, 1) && false)) {
CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[45]++;
          return true;

        } else {
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[46]++;}

      } else {
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[44]++;}

    } else {
  CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1.branches[42]++;}

    return false;
  }
}

class CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1 extends org.codecover.instrumentation.java.measurement.CounterContainer {

  static {
    org.codecover.instrumentation.java.measurement.ProtocolImpl.getInstance(org.codecover.instrumentation.java.measurement.CoverageResultLogFile.getInstance(null), "fc723371-5766-4804-90bc-1687dd8f2639").addObservedContainer(new CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1 ());
  }
    public static long[] statements = new long[53];
    public static long[] branches = new long[47];

  public static final org.codecover.instrumentation.java.measurement.ConditionCounter[] conditionCounters = new org.codecover.instrumentation.java.measurement.ConditionCounter[20];
  static {
    final String SECTION_NAME = "com.google.javascript.jscomp.ExploitAssigns.java";
    final byte[] CONDITION_COUNTER_TYPES = {0,1,1,2,2,1,1,1,1,2,1,3,2,1,2,1,1,1,2,1};
    for (int i = 1; i <= 19; i++) {
      switch (CONDITION_COUNTER_TYPES[i]) {
        case 0 : break;
        case 1 : conditionCounters[i] = new org.codecover.instrumentation.java.measurement.SmallOneConditionCounter(SECTION_NAME, "C" + i); break;
        case 2 : conditionCounters[i] = new org.codecover.instrumentation.java.measurement.SmallTwoConditionCounter(SECTION_NAME, "C" + i); break;
        case 3 : conditionCounters[i] = new org.codecover.instrumentation.java.measurement.MediumConditionCounter(SECTION_NAME, "C" + i); break;
        case 4 : conditionCounters[i] = new org.codecover.instrumentation.java.measurement.LargeConditionCounter(SECTION_NAME, "C" + i); break;
      }
    }
  }
    public static long[] loops = new long[10];

  public CodeCoverCoverageCounter$152y0wa9sff1t6itniimb6sw6q5zs1 () {
    super("com.google.javascript.jscomp.ExploitAssigns.java");
  }

  public static void ping() {/* nothing to do*/}

  public void reset() {
      for (int i = 1; i <= 52; i++) {
        statements[i] = 0L;
      }
      for (int i = 1; i <= 46; i++) {
        branches[i] = 0L;
      }
    for (int i = 1; i <= 19; i++) {
      if (conditionCounters[i] != null) {
        conditionCounters[i].reset();
      }
    }
      for (int i = 1; i <= 9; i++) {
        loops[i] = 0L;
      }
  }

  public void serializeAndReset(org.codecover.instrumentation.measurement.CoverageCounterLog log) {
    log.startNamedSection("com.google.javascript.jscomp.ExploitAssigns.java");
      for (int i = 1; i <= 52; i++) {
        if (statements[i] != 0L) {
          log.passCounter("S" + i, statements[i]);
          statements[i] = 0L;
        }
      }
      for (int i = 1; i <= 46; i++) {
        if (branches[i] != 0L) {
          log.passCounter("B"+ i, branches[i]);
          branches[i] = 0L;
        }
      }
    for (int i = 1; i <= 19; i++) {
      if (conditionCounters[i] != null) {
        conditionCounters[i].serializeAndReset(log);
      }
    }
      for (int i = 1; i <= 3; i++) {
        if (loops[i * 3 - 2] != 0L) {
          log.passCounter("L" + i + "-0", loops[i * 3 - 2]);
          loops[i * 3 - 2] = 0L;
        }
        if ( loops[i * 3 - 1] != 0L) {
          log.passCounter("L" + i + "-1", loops[i * 3 - 1]);
          loops[i * 3 - 1] = 0L;
        }
        if ( loops[i * 3] != 0L) {
          log.passCounter("L" + i + "-2", loops[i * 3]);
          loops[i * 3] = 0L;
        }
      }
  }
}
