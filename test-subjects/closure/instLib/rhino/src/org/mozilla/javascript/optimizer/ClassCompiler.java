/* -*- Mode: java; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package org.mozilla.javascript.optimizer;

import org.mozilla.javascript.*;
import org.mozilla.javascript.ast.AstRoot;
import org.mozilla.javascript.ast.FunctionNode;
import org.mozilla.javascript.ast.ScriptNode;

/**
 * Generates class files from script sources.
 *
 * since 1.5 Release 5
 */

public class ClassCompiler
{
  static {
    CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.ping();
  }

    /**
     * Construct ClassCompiler that uses the specified compiler environment
     * when generating classes.
     */
    public ClassCompiler(CompilerEnvirons compilerEnv)
    {
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[1]++;
int CodeCoverConditionCoverageHelper_C1;
        if ((((((CodeCoverConditionCoverageHelper_C1 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C1 |= (2)) == 0 || true) &&
 ((compilerEnv == null) && 
  ((CodeCoverConditionCoverageHelper_C1 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.conditionCounters[1].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C1, 1) || true)) || (CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.conditionCounters[1].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C1, 1) && false)) {
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.branches[1]++; throw new IllegalArgumentException();
} else {
  CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.branches[2]++;}
        this.compilerEnv = compilerEnv;
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[2]++;
        this.mainMethodClassName = Codegen.DEFAULT_MAIN_METHOD_CLASS;
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[3]++;
    }

    /**
     * Set the class name to use for main method implementation.
     * The class must have a method matching
     * <tt>public static void main(Script sc, String[] args)</tt>, it will be
     * called when <tt>main(String[] args)</tt> is called in the generated
     * class. The class name should be fully qulified name and include the
     * package name like in <tt>org.foo.Bar<tt>.
     */
    public void setMainMethodClass(String className)
    {
        // XXX Should this check for a valid class name?
        mainMethodClassName = className;
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[4]++;
    }

    /**
     * Get the name of the class for main method implementation.
     * @see #setMainMethodClass(String)
     */
    public String getMainMethodClass()
    {
        return mainMethodClassName;
    }

    /**
     * Get the compiler environment the compiler uses.
     */
    public CompilerEnvirons getCompilerEnv()
    {
        return compilerEnv;
    }

    /**
     * Get the class that the generated target will extend.
     */
    public Class<?> getTargetExtends()
    {
        return targetExtends;
    }

    /**
     * Set the class that the generated target will extend.
     *
     * @param extendsClass the class it extends
     */
    public void setTargetExtends(Class<?> extendsClass)
    {
        targetExtends = extendsClass;
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[5]++;
    }

    /**
     * Get the interfaces that the generated target will implement.
     */
    public Class<?>[] getTargetImplements()
    {
        return targetImplements == null ? null : (Class[])targetImplements.clone();
    }

    /**
     * Set the interfaces that the generated target will implement.
     *
     * @param implementsClasses an array of Class objects, one for each
     *                          interface the target will extend
     */
    public void setTargetImplements(Class<?>[] implementsClasses)
    {
        targetImplements = implementsClasses == null ? null : (Class[])implementsClasses.clone();
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[6]++;
    }

    /**
     * Build class name for a auxiliary class generated by compiler.
     * If the compiler needs to generate extra classes beyond the main class,
     * it will call this function to build the auxiliary class name.
     * The default implementation simply appends auxMarker to mainClassName
     * but this can be overridden.
     */
    protected String makeAuxiliaryClassName(String mainClassName,
                                            String auxMarker)
    {
        return mainClassName+auxMarker;
    }

    /**
     * Compile JavaScript source into one or more Java class files.
     * The first compiled class will have name mainClassName.
     * If the results of {@link #getTargetExtends()} or
     * {@link #getTargetImplements()} are not null, then the first compiled
     * class will extend the specified super class and implement
     * specified interfaces.
     *
     * @return array where elements with even indexes specifies class name
     *         and the following odd index gives class file body as byte[]
     *         array. The initial element of the array always holds
     *         mainClassName and array[1] holds its byte code.
     */
    public Object[] compileToClassFiles(String source,
                                        String sourceLocation,
                                        int lineno,
                                        String mainClassName)
    {
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[7]++;
        Parser p = new Parser(compilerEnv);
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[8]++;
        AstRoot ast = p.parse(source, sourceLocation, lineno);
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[9]++;
        IRFactory irf = new IRFactory(compilerEnv);
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[10]++;
        ScriptNode tree = irf.transformTree(ast);

        // release reference to original parse tree & parser
        irf = null;
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[11]++;
        ast = null;
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[12]++;
        p = null;
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[13]++;
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[14]++;

        Class<?> superClass = getTargetExtends();
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[15]++;
        Class<?>[] interfaces = getTargetImplements();
        String scriptClassName;
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[16]++;
        boolean isPrimary = (interfaces == null && superClass == null);
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[17]++;
int CodeCoverConditionCoverageHelper_C2;
        if ((((((CodeCoverConditionCoverageHelper_C2 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C2 |= (2)) == 0 || true) &&
 ((isPrimary) && 
  ((CodeCoverConditionCoverageHelper_C2 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.conditionCounters[2].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C2, 1) || true)) || (CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.conditionCounters[2].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C2, 1) && false)) {
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.branches[3]++;
            scriptClassName = mainClassName;
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[18]++;

        } else {
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.branches[4]++;
            scriptClassName = makeAuxiliaryClassName(mainClassName, "1");
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[19]++;
        }
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[20]++;

        Codegen codegen = new Codegen();
        codegen.setMainMethodClass(mainMethodClassName);
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[21]++;
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[22]++;
        byte[] scriptClassBytes
            = codegen.compileToClassFile(compilerEnv, scriptClassName,
                                         tree, tree.getEncodedSource(),
                                         false);
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[23]++;
int CodeCoverConditionCoverageHelper_C3;

        if ((((((CodeCoverConditionCoverageHelper_C3 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C3 |= (2)) == 0 || true) &&
 ((isPrimary) && 
  ((CodeCoverConditionCoverageHelper_C3 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.conditionCounters[3].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C3, 1) || true)) || (CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.conditionCounters[3].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C3, 1) && false)) {
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.branches[5]++;
            return new Object[] { scriptClassName, scriptClassBytes };

        } else {
  CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.branches[6]++;}
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[24]++;
        int functionCount = tree.getFunctionCount();
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[25]++;
        ObjToIntMap functionNames = new ObjToIntMap(functionCount);
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[26]++;
byte CodeCoverTryBranchHelper_L1 = 0;
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.loops[1]++;


int CodeCoverConditionCoverageHelper_C4;
        for (int i = 0;(((((CodeCoverConditionCoverageHelper_C4 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C4 |= (2)) == 0 || true) &&
 ((i != functionCount) && 
  ((CodeCoverConditionCoverageHelper_C4 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.conditionCounters[4].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C4, 1) || true)) || (CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.conditionCounters[4].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C4, 1) && false); ++i) {
if (CodeCoverTryBranchHelper_L1 == 0) {
  CodeCoverTryBranchHelper_L1++;
  CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.loops[1]--;
  CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.loops[2]++;
} else if (CodeCoverTryBranchHelper_L1 == 1) {
  CodeCoverTryBranchHelper_L1++;
  CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.loops[2]--;
  CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.loops[3]++;
}
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[27]++;
            FunctionNode ofn = tree.getFunctionNode(i);
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[28]++;
            String name = ofn.getName();
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[29]++;
int CodeCoverConditionCoverageHelper_C5;
            if ((((((CodeCoverConditionCoverageHelper_C5 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C5 |= (8)) == 0 || true) &&
 ((name != null) && 
  ((CodeCoverConditionCoverageHelper_C5 |= (4)) == 0 || true)))
 && 
(((CodeCoverConditionCoverageHelper_C5 |= (2)) == 0 || true) &&
 ((name.length() != 0) && 
  ((CodeCoverConditionCoverageHelper_C5 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.conditionCounters[5].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C5, 2) || true)) || (CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.conditionCounters[5].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C5, 2) && false)) {
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.branches[7]++;
                functionNames.put(name, ofn.getParamCount());
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[30]++;

            } else {
  CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.branches[8]++;}
        }
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[31]++;
int CodeCoverConditionCoverageHelper_C6;
        if ((((((CodeCoverConditionCoverageHelper_C6 = 0) == 0) || true) && (
(((CodeCoverConditionCoverageHelper_C6 |= (2)) == 0 || true) &&
 ((superClass == null) && 
  ((CodeCoverConditionCoverageHelper_C6 |= (1)) == 0 || true)))
)) && (CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.conditionCounters[6].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C6, 1) || true)) || (CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.conditionCounters[6].incrementCounterOfBitMask(CodeCoverConditionCoverageHelper_C6, 1) && false)) {
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.branches[9]++;
            superClass = ScriptRuntime.ObjectClass;
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[32]++;

        } else {
  CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.branches[10]++;}
CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69.statements[33]++;
        byte[] mainClassBytes
            = JavaAdapter.createAdapterCode(
                functionNames, mainClassName,
                superClass, interfaces, scriptClassName);

        return new Object[] { mainClassName, mainClassBytes,
                              scriptClassName, scriptClassBytes };
    }

    private String mainMethodClassName;
    private CompilerEnvirons compilerEnv;
    private Class<?> targetExtends;
    private Class<?>[] targetImplements;

}

class CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69 extends org.codecover.instrumentation.java.measurement.CounterContainer {

  static {
    org.codecover.instrumentation.java.measurement.ProtocolImpl.getInstance(org.codecover.instrumentation.java.measurement.CoverageResultLogFile.getInstance(null), "fc723371-5766-4804-90bc-1687dd8f2639").addObservedContainer(new CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69 ());
  }
    public static long[] statements = new long[34];
    public static long[] branches = new long[11];

  public static final org.codecover.instrumentation.java.measurement.ConditionCounter[] conditionCounters = new org.codecover.instrumentation.java.measurement.ConditionCounter[7];
  static {
    final String SECTION_NAME = "org.mozilla.javascript.optimizer.RHINO-SRC-ClassCompiler.java";
    final byte[] CONDITION_COUNTER_TYPES = {0,1,1,1,1,2,1};
    for (int i = 1; i <= 6; i++) {
      switch (CONDITION_COUNTER_TYPES[i]) {
        case 0 : break;
        case 1 : conditionCounters[i] = new org.codecover.instrumentation.java.measurement.SmallOneConditionCounter(SECTION_NAME, "C" + i); break;
        case 2 : conditionCounters[i] = new org.codecover.instrumentation.java.measurement.SmallTwoConditionCounter(SECTION_NAME, "C" + i); break;
        case 3 : conditionCounters[i] = new org.codecover.instrumentation.java.measurement.MediumConditionCounter(SECTION_NAME, "C" + i); break;
        case 4 : conditionCounters[i] = new org.codecover.instrumentation.java.measurement.LargeConditionCounter(SECTION_NAME, "C" + i); break;
      }
    }
  }
    public static long[] loops = new long[4];

  public CodeCoverCoverageCounter$11f1r6z5fa12k16lbs8w8rr3gd4qgj5907atxlfrvc69 () {
    super("org.mozilla.javascript.optimizer.RHINO-SRC-ClassCompiler.java");
  }

  public static void ping() {/* nothing to do*/}

  public void reset() {
      for (int i = 1; i <= 33; i++) {
        statements[i] = 0L;
      }
      for (int i = 1; i <= 10; i++) {
        branches[i] = 0L;
      }
    for (int i = 1; i <= 6; i++) {
      if (conditionCounters[i] != null) {
        conditionCounters[i].reset();
      }
    }
      for (int i = 1; i <= 3; i++) {
        loops[i] = 0L;
      }
  }

  public void serializeAndReset(org.codecover.instrumentation.measurement.CoverageCounterLog log) {
    log.startNamedSection("org.mozilla.javascript.optimizer.RHINO-SRC-ClassCompiler.java");
      for (int i = 1; i <= 33; i++) {
        if (statements[i] != 0L) {
          log.passCounter("S" + i, statements[i]);
          statements[i] = 0L;
        }
      }
      for (int i = 1; i <= 10; i++) {
        if (branches[i] != 0L) {
          log.passCounter("B"+ i, branches[i]);
          branches[i] = 0L;
        }
      }
    for (int i = 1; i <= 6; i++) {
      if (conditionCounters[i] != null) {
        conditionCounters[i].serializeAndReset(log);
      }
    }
      for (int i = 1; i <= 1; i++) {
        if (loops[i * 3 - 2] != 0L) {
          log.passCounter("L" + i + "-0", loops[i * 3 - 2]);
          loops[i * 3 - 2] = 0L;
        }
        if ( loops[i * 3 - 1] != 0L) {
          log.passCounter("L" + i + "-1", loops[i * 3 - 1]);
          loops[i * 3 - 1] = 0L;
        }
        if ( loops[i * 3] != 0L) {
          log.passCounter("L" + i + "-2", loops[i * 3]);
          loops[i * 3] = 0L;
        }
      }
  }
}

